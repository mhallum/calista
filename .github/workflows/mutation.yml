# .github/workflows/mutation.yml
name: Mutation testing (Cosmic Ray)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 10 * * *" # daily at 10:00 UTC
  pull_request:
    types: [labeled, synchronize, opened, reopened]

jobs:
  cosmic-ray:
    if: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'mutation')) || github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    concurrency:
      group: mutation-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed so cr-filter-git can diff against origin/main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          pipx install poetry
          poetry --version

      - name: Install deps (including cosmic-ray)
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
        run: |
          poetry install --no-interaction --no-root
          # If cosmic-ray isn't in pyproject yet, uncomment:
          # poetry run pip install cosmic-ray

      - name: Init session
        run: poetry run cosmic-ray init cr.toml cr.sqlite

      - name: Apply filters (only changed lines vs main)
        run: |
          # optional: skips mutants outside changed lines
          poetry run cr-filter-git cr.sqlite
          poetry run cr-filter-operators cr.sqlite cr.toml
          poetry run cr-filter-pragma cr.sqlite

      - name: Baseline (sanity-check test command)
        run: poetry run cosmic-ray baseline cr.toml

      - name: Execute mutation tests
        run: poetry run cosmic-ray exec cr.toml cr.sqlite

      - name: Console summary
        run: poetry run cr-report cr.sqlite --show-pending
        # shows "surviving mutants: X (Y%)" in logs

      - name: HTML report + badge
        run: |
          poetry run cr-html cr.sqlite > mutation-report.html
          poetry run cr-badge mutation.svg cr.sqlite

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cosmic-ray-report
          path: |
            mutation-report.html
            mutation.svg
            cr.sqlite

      - name: Gate on survival rate (fail if too high)
        env:
          THRESHOLD: "0.15" # allow at most 15% survivors
        run: |
          RATE=$(poetry run cr-rate cr.sqlite)
          echo "Survival rate: $RATE (fraction)"
          python - <<'PY'
            import os, sys
            rate = float(os.environ["RATE"])
            th   = float(os.environ["THRESHOLD"])
            print(f"Quality gate: rate={rate:.4f} threshold<={th:.4f}")
            sys.exit(0 if rate <= th else 1)
            PY
        shell: bash
